#!/bin/env bash
#set -xv

# Check if either podman or docker is installed.
#
which podman-compose    2> /dev/null
if  (($? == 0)) then
    CONTAINER_EXE=podman-compose
else
    which docker-compose    2> /dev/null
    if  (($? == 0)) then
        CONTAINER_EXE=docker-compose
    else
        echo "ERROR! Neither podman-compose or docker-compose is setup in your PATH.  Cannot continue ..."
        exit  1
    fi
fi

# Setup the variable RUN_TIMESTAMP to be passed into the container composer.
export  RUN_TIMESTAMP=$(date +'_%Y%m%d_%H%M')

# Setup the variables to be passed into the container composer.
export  TEST_DEBUG_LEVEL=0
export  TEST_CLUSTER_SIZE=5
export  TEST_KEY_ENTRIES=200
export  TEST_APERTURE=0.05
export  TEST_DATA_SIZE_MIX=1
export  TEST_RUN_DURATION=5
export  TEST_MONKEY_TANTRUM=0
export  MCCACHE_CACHE_TTL=3600
export  MCCACHE_CACHE_MAX=256
export  MCCACHE_CACHE_SIZE=8388608
export  MCCACHE_CACHE_PULSE=5
export  MCCACHE_CALLBACK_WIN=0
export  MCCACHE_CRYPTO_KEY=

# Start of CLI.
# Parse the command line parameters with the following format:
# run_test  [ key1 val1 [key2 val2 [key3 val3 [...]]]]
# where the keys are case sensitive:
while getopts "DPL:K:C:A:M:R:T:t:e:s:p:w:k:" opt; do
    case  $opt  in
        D)  which docker-compose    2> /dev/null
            if  (($? == 0)) then
                CONTAINER_EXE=docker-compose
            else
                echo docker executable NOT found!
                exit 1
            fi
            ;;
        P)  which podman-compose    2> /dev/null
            if  (($? == 0)) then
                CONTAINER_EXE=podman-compose
            else
                echo podman executable NOT found!
                exit 1
            fi
            ;;
        L)  if  [[ ${OPTARG} =~ ^[0-5]$ ]]
            then
                TEST_DEBUG_LEVEL=${OPTARG}
            else
                echo "Option for -L MUST be a positive integer. 0=diable ,1=basic ,3=extra ,5=superfluous"
                exit  1
            fi
            ;;
        K)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                TEST_KEY_ENTRIES=${OPTARG}
            else
                echo "Option for -K MUST be a positive integer."
                exit  1
            fi
            ;;
        C)  if  [[ ${OPTARG} =~ ^[2-9]$ ]]
            then
                TEST_CLUSTER_SIZE=${OPTARG}
            else
                echo "Option for -C MUST be a positive integer. 2-9"
                exit  1
            fi
            ;;
        A)  if  [[ ${OPTARG} =~ ^0.[0-9]+$ ]]
            then
                TEST_APERTURE=${OPTARG}
            else
                echo "Option for -A MUST be a positive float. 0.1 - 0.0001"
                exit  1
            fi
            ;;
        M)  if  [[ ${OPTARG} =~ ^[123]$ ]]
            then
                TEST_DATA_SIZE_MIX=${OPTARG}
            else
                echo "Option for -M MUST be either 1=small ,2=large ,3=mixed."
                exit  1
            fi
            ;;
        R)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                TEST_RUN_DURATION=${OPTARG}
            else
                echo "Option for -R MUST be a positive integer."
                exit  1
            fi
            ;;
        T)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                TEST_MONKEY_TANTRUM=${OPTARG}
            else
                echo "Option for -T MUST be a positive integer. 0-9"
                exit  1
            fi
            ;;
        t)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                MCCACHE_CACHE_TTL=${OPTARG}
            else
                echo "Option for -t MUST be a positive integer."
                exit  1
            fi
            ;;
        e)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                MCCACHE_CACHE_MAX=${OPTARG}
            else
                echo "Option for -e MUST be a positive integer."
                exit  1
            fi
            ;;
        s)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                MCCACHE_CACHE_SIZE=${OPTARG}
            else
                echo "Option for -e MUST be a positive integer."
                exit  1
            fi
            ;;
        p)  if  [[ ${OPTARG} =~ ^[1-9][0-9]*$ ]]
            then
                MCCACHE_CACHE_PULSE=${OPTARG}
            else
                echo "Option for -p MUST be a positive integer."
                exit  1
            fi
            ;;
        w)  if  [[ ${OPTARG} =~ ^[0-9]+$ ]]
            then
                MCCACHE_CALLBACK_WIN=${OPTARG}
            else
                echo "Option for -w MUST be a positive integer. 0-9999"
                exit  1
            fi
            ;;
        k)  if  [[ ${OPTARG: -1} == "=" ]]
            then
                MCCACHE_CRYPTO_KEY=${OPTARG}
            else
                echo "Option for -k MUST be a well form base64 string.  For testing, try: sjQNjXGt_AygJrrFUu7C5hN6voq9a9WBBorVXkuD3Xc="
                exit  1
            fi
            ;;
        *)  echo  Invalid parameter value.  Try the following:
            echo "$0  [-D ] [ -P] [-L #] [-C #] [-S #] [-M #] [-R #] [-T #]  [-t #] [-e #] [-s #] [-p #] [-w #]"
            echo "       Test configuration:"
            echo "-D     Use Docker container."
            echo "-P     Use Podman container."
            echo "-L #   Debug level.            Default ${TEST_DEBUG_LEVEL}.  0=Off ,1=Basic ,3=Extra ,5=Superfluous"
            echo "-K #   Max key entries to use. Default ${TEST_KEY_ENTRIES}"
            echo "-C #   Cluster size.           Default ${TEST_CLUSTER_SIZE}.  Max is 9."
            echo "-A #   Sleep aperture.         Default ${TEST_APERTURE} second pause between operations.  1=1s ,0.1=100ms ,0.01=10ms ,0.001=1ms ,0.0005=0.5ms ,0.0001=0.1ms/100us"
            echo "-M #   Data size mix.          Default ${TEST_DATA_SIZE_MIX}.  1=Small ,2=Big ,3=Mix."
            echo "-R #   Run duration.           Default ${TEST_RUN_DURATION} minutes."
            echo "-T #   Monkey tantrum.         Default ${TEST_MONKEY_TANTRUM} percent of dropped packets.  0=Disabled."
            echo "       Test configuration:"
            echo "-t #   Time-to-live.           Default ${MCCACHE_CACHE_TTL} seconds."
            echo "-e #   Maximum cache entries.  Default ${MCCACHE_CACHE_MAX} entries."
            echo "-s #   Maximum cache storage.  Default ${MCCACHE_CACHE_SIZE} bytes."
            echo "-p #   Cache sync pulse.       Default ${MCCACHE_CACHE_PULSE} seconds."
            echo "-w #   Callback spike window.  Default ${MCCACHE_CALLBACK_WIN} seconds."
            echo "-k #   Cryptography key.       Default is none."
            ;;
    esac
done
# End of CLI.

echo Running McCache test with envar:
echo    CONTAINER_EXE:          ${CONTAINER_EXE}
echo    RUN_TIMESTAMP:          ${RUN_TIMESTAMP}
echo    TEST_DEBUG_LEVEL:       ${TEST_DEBUG_LEVEL}
echo    TEST_CLUSTER_SIZE:      ${TEST_CLUSTER_SIZE}
echo    TEST_KEY_ENTRIES:       ${TEST_KEY_ENTRIES}
echo    TEST_APERTURE:          ${TEST_APERTURE}
echo    TEST_DATA_SIZE_MIX:     ${TEST_DATA_SIZE_MIX}
echo    TEST_MONKEY_TANTRUM:    ${TEST_MONKEY_TANTRUM}
echo    TEST_RUN_DURATION:      ${TEST_RUN_DURATION}
echo    MCCACHE_CACHE_TTL:      ${MCCACHE_CACHE_TTL}
echo    MCCACHE_CACHE_MAX:      ${MCCACHE_CACHE_MAX}
echo    MCCACHE_CACHE_SIZE:     ${MCCACHE_CACHE_SIZE}
echo    MCCACHE_CACHE_PULSE:    ${MCCACHE_CACHE_PULSE}
echo    MCCACHE_CALLBACK_WIN:   ${MCCACHE_CALLBACK_WIN}
echo    MCCACHE_CRYPTO_KEY:     ${MCCACHE_CRYPTO_KEY}
echo

# The following are CLI input parameter you can use to parse out the script name information.
# echo ${0}

# Change over to the project root directory no matter where this script is invoked.
_fp=$(readlink -f $0)
pushd ${_fp%tests/*}

# Create the log directory if it doesn't exist, else empty the directory before we start.
#
if [ ! -d log ]; then
    mkdir -p log
else
    rm    -f log/*
fi

# Initialize a minimum of two nodes.
NODE01=node01
NODE02=node02

for v in $(seq 1 ${TEST_CLUSTER_SIZE}); do  eval NODE0${v}\="node0${v}"; done

# Bring up the cluster of containers and wait until we are done exercising the cache.
#
echo Starting the test cluster.
# Keep in foreground with the maximum of 9 nodes as specified in "docker-compose.yml"
${CONTAINER_EXE} up  ${NODE01} ${NODE02} ${NODE03} ${NODE04} ${NODE05} ${NODE06} ${NODE07} ${NODE08} ${NODE09}


# Wait for the test run to be completed in the cluster and test the output log.
echo Run test using the output log from the cluster.

# Extract out and clean up the INQ result from each of the debug log files into a result file.
# NOTE: There is a embedded TAB character in the search string.
cat     log/*debug0*.log |grep -E "	INQ	|	MET	|Done|Exiting" |grep -Ev "Fr:|Out going|Delete" |sed "/Exiting/a}" |sed "s/{/\n /" |sed "s/},/}\n/g" |sed "s/}}/}\n/"   > log/result.txt

# Validate the stress test rsults.
pytest  tests/stress/test_stress.py log/result.txt

# Sort the logs in chronological order.
sort    log/*debug0*.log >log/chronological.txt

# Extract details.
grep -iE  "after lookup|in the background"          log/chronological.txt   >log/detail_expire.log
grep -iE  "message queue size|done testing"         log/chronological.txt   >log/detail_queue_pressure.log
grep -iE  "sending local|requesting sender"         log/chronological.txt   >log/detail_synchronization.log
grep -iE  "cache incoherent"                        log/chronological.txt   >log/detail_incoherent.log
grep -iE  "monkey is angry"                         log/chronological.txt   >log/detail_drop_packets.log

# Extract summaries.
if  (( ${TEST_DEBUG_LEVEL} >= 1 )); then
    # Outbound Op codes.
    cat log/chronological.txt   |grep " Im:" |grep -vE "	Fr:|	>"  |awk 'BEGIN{ FS="\t"}  {if $3 != "" print $3}'  |sort   |uniq -c    >log/sumamry_opcode.log
fi

popd
