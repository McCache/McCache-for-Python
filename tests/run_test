#!/bin/env bash
set -xv

# Check if either podman or docker is installed.
#
which podman-compose    2> /dev/null
if  (($? == 0)) then
    CONTAINER_EXE=podman-compose
else
    which docker-compose    2> /dev/null
    if  (($? == 0)) then
        CONTAINER_EXE=docker-compose
    else
        echo "ERROR! Neither podman-compose or docker-compose is setup in your PATH.  Cannot continue ..."
        exit  1
    fi
fi

# Setup the variable RUN_TIMESTAMP to be passed into the container composer.
export RUN_TIMESTAMP=$(date +'_%Y%m%d_%H%M')

# Parse the command line parameters with the following format:
# run_test  -k ###  -m ###
# where the case insensitive keys:
#   -k :    The maximum unique keys to use.
#   -m :    The maximum duration, in minutes, for this test run.
#   -s :    The maximum range for the random duration to sleep.
#   -u :    The unit for the sleep duration. 1 = 1s ,10 = 0.1s ,100 = 0.01s ,1000 = 0.001s
#   -t :    The maximum percentage of simulated drop packets.

# Setup the variable TEST_MAX_ENTRIES to be passed into the container composer.
export TEST_MAX_ENTRIES=100

# Setup the variable TEST_RUN_DURATION  to be passed into the container composer.
export TEST_RUN_DURATION=5

# Setup the variable TEST_SLEEP_SPAN to be passed into the container composer.
export TEST_SLEEP_SPAN=100

# Setup the variable TEST_SLEEP_SPAN to be passed into the container composer.
export TEST_SLEEP_UNIT=100

# Setup the variable TEST_MONKEY_TANTRUM to be passed into the container composer.
export TEST_MONKEY_TANTRUM=0

# Setup the variable TEST_MONKEY_TANTRUM to be passed into the container composer.
export TEST_CLUSTER_SIZE=3

# Start of CLI.
while getopts "k:d:s:u:m:c:" opt; do
    case  $opt  in
        k)  if  [[ $OPTARG =~ ^[0-9]+$ ]]
            then
                TEST_MAX_ENTRIES=${OPTARG}
            else
                echo "Option for -k MUST be a positive integer."
                exit  1
            fi
            ;;
        d)  if  [[ $OPTARG =~ ^[0-9]+$ ]]
            then
                TEST_RUN_DURATION=${OPTARG}
            else
                echo "Option for -m MUST be a positive integer."
                exit  1
            fi
            ;;
        s)  if  [[ $OPTARG =~ ^[0-9]+$ ]]
            then
                TEST_SLEEP_SPAN=${OPTARG}
            else
                echo "Option for -s MUST be a positive integer."
                exit  1
            fi
            ;;
        u)  if  [[ $OPTARG =~ ^[0-9]+$ ]]
            then
                TEST_SLEEP_UNIT=${OPTARG}
            else
                echo "Option for -u MUST be a positive integer. 1 = 1s ,10 = 0.1s ,100 = 0.01s ,1000 = 0.001s = 1ms"
                exit  1
            fi
            ;;
        m)  if  [[ $OPTARG =~ ^[0-9]+$ ]]
            then
                TEST_MONKEY_TANTRUM=${OPTARG}
            else
                echo "Option for -u MUST be a positive integer. 0-20"
                exit  1
            fi
            ;;
        c)  if  [[ $OPTARG =~ ^[2-9]$ ]]
            then
                TEST_CLUSTER_SIZE=${OPTARG}
            else
                echo "Option for -c MUST be a positive integer. 2-9"
                exit  1
            fi
            ;;
        *)  echo  Invalid parameter value.  Try the following:
            echo  $0  '[-k ###] [-m ###] [-s ###] [-u ###] [-m ###] [-c ###]'
            echo  ' -k ###  Max entries.    Default 100.'
            echo  ' -d ###  Run duration.   Default 5 minutes.'
            echo  ' -s ###  Sleep span.     Default 100.'
            echo  ' -u ###  Sleep unit.     Default 100.'
            echo  ' -m ###  Monkey tantrum. Default 0.'
            echo  ' -c ###  Cluster size.   Default 3.  Max is 9.'
            exit  1
            ;;
    esac
done
echo ${TEST_MAX_ENTRIES} ${TEST_RUN_DURATION}
# End of CLI.

echo Running McCache test with envar:
echo    RUN_TIMESTAMP:      ${RUN_TIMESTAMP}
echo    TEST_MAX_ENTRIES:   ${TEST_MAX_ENTRIES}
echo    TEST_RUN_DURATION:  ${TEST_RUN_DURATION}
echo    TEST_SLEEP_SPAN:    ${TEST_SLEEP_SPAN}
echo    TEST_SLEEP_UNIT:    ${TEST_SLEEP_UNIT}
echo    TEST_MONKEY_TANTRUM:${TEST_MONKEY_TANTRUM}
echo    TEST_CLUSTER_SIZE:  ${TEST_CLUSTER_SIZE}
echo

# The following are CLI input parameter you can use to parse out the script name information.
# echo ${0}

# Change over to the project root directory no matter where this script is invoked.
pushd ${0%*/*}

# Create the log directory if it doesn't exist, else empty the directory before we start.
#
if [ ! -d log ]; then
    mkdir -p log
else
    rm    -f log/*
fi

# Initialize a minimum of two nodes.
NODE01=node01
NODE02=node02

for v in $(seq 1 ${TEST_CLUSTER_SIZE}); do  NODE0${v}=node0${v}; done

# Bring up the cluster of containers and wait until we are done exercising the cache.
#
echo Starting the test cluster.
# Keep in foregound with the maximum of 9 nodes as specified in "docker-compose.yml"
${CONTAINER_EXE} up  ${NODE01} ${NODE02} ${NODE03} ${NODE04} ${NODE05} ${NODE06} ${NODE07} ${NODE08} ${NODE09}


# Wait for the test run to be completed in the cluster and test the output log.
echo Run test using the output log from the cluster.

# Extract out and clean up the INQ result from each of the debug log files into a result file.
tail log/debug0*.log |grep "INQ" |grep -Ev "Fr:|Multicasted" |sed "s/{/\n  /" |tr "}" "\n"  > log/result.txt

pipenv run  pytest -q .

popd
